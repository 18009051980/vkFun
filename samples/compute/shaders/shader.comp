#version 450


layout(binding = 0) uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

struct Particle {
    float[3] position;
    float[3] color;
    float[3] velocity;
};

layout(std430, binding = 1) readonly buffer ParticleSSBOIn {
    Particle particlesIn[ ];
};

layout(std430, binding = 2) buffer ParticleSSBOOut {
    Particle particlesOut[ ];
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    Particle particleIn = particlesIn[index];
    
    particlesOut[index].position[0] = particleIn.position[0] + particleIn.velocity[0];
    particlesOut[index].position[1] = particleIn.position[1] + particleIn.velocity[1];
    particlesOut[index].position[2] = particleIn.position[2] + particleIn.velocity[2];

    // if (particlesOut[index].position[0] >= 1.0 || particlesOut[index].position[0] <= -1.f)
    // {
    //     particlesOut[index].velocity[0] *= -1;
    // }
    // if (particlesOut[index].position[1] >= 1.0 || particlesOut[index].position[1] <= -1.f)
    // {
    //     particlesOut[index].velocity[1] *= -1;
    // }

    // particlesOut[index].velocity[0] *= mix(1.f, -1.f, step(1, particlesOut[index].position[0]));
    // particlesOut[index].velocity[0] *= mix(-1.f, 1.f, step(-1, particlesOut[index].position[0]));
    
    // particlesOut[index].velocity[1] *= mix(1.f, -1.f, step(1, particlesOut[index].position[1]));
    // particlesOut[index].velocity[1] *= mix(-1.f, 1.f, step(-1, particlesOut[index].position[1]));

    particlesOut[index].velocity[0] *= 1.0 - 2.0 * step(1, particlesOut[index].position[0]);
    particlesOut[index].velocity[0] *= 2.0 * step(-1, particlesOut[index].position[0]) - 1;
    
    particlesOut[index].velocity[1] *= 1.0 - 2.0 * step(1, particlesOut[index].position[1]);
    particlesOut[index].velocity[1] *= 2.0 * step(-1, particlesOut[index].position[1]) - 1;
    
}